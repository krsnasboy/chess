<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Local Chess Tournaments</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #34495e;
            --accent: #e74c3c;
            --light: #ecf0f1;
            --dark: #2c3e50;
            --success: #27ae60;
            --warning: #f39c12;
        }
        
        body {
            font-family: 'Montserrat', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: var(--dark);
        }
        
        header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 2rem 0;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        h1, h2, h3 {
            font-family: 'Playfair Display', serif;
        }
        
        h1 {
            margin: 0;
            font-size: 2.5rem;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .tournament-section {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            overflow: hidden;
        }
        
        .section-header {
            background: var(--secondary);
            color: white;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .section-title {
            margin: 0;
            font-size: 1.5rem;
        }
        
        .btn {
            background: var(--accent);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            background: #c0392b;
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background: var(--secondary);
        }
        
        .btn-secondary:hover {
            background: #2c3e50;
        }
        
        .leaderboard {
            width: 100%;
            border-collapse: collapse;
        }
        
        .leaderboard th, .leaderboard td {
            padding: 1rem;
            text-align: center;
            border-bottom: 1px solid #eee;
        }
        
        .leaderboard th {
            background: var(--light);
            font-weight: bold;
        }
        
        .leaderboard tr:hover {
            background: #f9f9f9;
        }
        
        .leaderboard .position-1 {
            background: rgba(241, 196, 15, 0.1);
        }
        
        .leaderboard .position-2 {
            background: rgba(189, 195, 199, 0.1);
        }
        
        .matches-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            padding: 1.5rem;
        }
        
        .match-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            border-left: 4px solid var(--accent);
            transition: all 0.3s ease;
        }
        
        .match-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        
        .match-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #eee;
        }
        
        .match-title {
            margin: 0;
            font-size: 1.1rem;
            color: var(--primary);
        }
        
        .match-status {
            background: var(--light);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        
        .match-status.completed {
            background: rgba(39, 174, 96, 0.2);
            color: var(--success);
        }
        
        .match-status.upcoming {
            background: rgba(241, 196, 15, 0.2);
            color: var(--warning);
        }
        
        .match-players {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .player-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .player-name {
            font-weight: bold;
        }
        
        .player-score {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .score-input {
            width: 50px;
            padding: 0.25rem;
            text-align: center;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .match-actions {
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
            margin-top: 1rem;
        }
        
        .knockout-bracket {
            display: flex;
            justify-content: space-around;
            padding: 2rem;
            position: relative;
        }
        
        .bracket-column {
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            min-height: 400px;
        }
        
        .bracket-match {
            background: white;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 1rem;
            width: 200px;
            margin: 0.5rem 0;
            position: relative;
        }
        
        .bracket-match::after {
            content: '';
            position: absolute;
            right: -20px;
            top: 50%;
            width: 20px;
            height: 2px;
            background: #ddd;
        }
        
        .bracket-match::before {
            content: '';
            position: absolute;
            right: -20px;
            top: 50%;
            width: 2px;
            height: 100%;
            background: #ddd;
        }
        
        .bracket-match.final {
            background: rgba(241, 196, 15, 0.1);
            border: 2px solid var(--warning);
        }
        
        .bracket-match.final::after, .bracket-match.final::before {
            display: none;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        
        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--secondary);
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
            margin-top: 1.5rem;
        }
        
        @media (max-width: 768px) {
            .matches-grid {
                grid-template-columns: 1fr;
            }
            
            .knockout-bracket {
                flex-direction: column;
                padding: 1rem;
            }
            
            .bracket-column {
                min-height: auto;
                margin-bottom: 2rem;
            }
            
            .bracket-match {
                width: 100%;
            }
            
            .bracket-match::after, .bracket-match::before {
                display: none;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <h1>Local Chess Tournaments</h1>
            <p>Hosting competitive chess events for our community</p>
        </div>
    </header>
    
    <div class="container">
        <div class="tournament-section">
            <div class="section-header">
                <h2 class="section-title">Current Tournament</h2>
                <button id="edit-tournament-btn" class="btn btn-secondary">
                    <i class="fas fa-cog"></i> Settings
                </button>
            </div>
            
            <div class="tournament-info" style="padding: 1.5rem;">
                <h3>Summer Chess Championship</h3>
                <p><strong>Date:</strong> June 15-30, 2023 | <strong>Location:</strong> Community Center</p>
                <p><strong>Format:</strong> Round Robin + Knockout | <strong>Players:</strong> 4</p>
            </div>
        </div>
        
        <div class="tournament-section">
            <div class="section-header">
                <h2 class="section-title">Leaderboard</h2>
            </div>
            
            <div style="overflow-x: auto;">
                <table class="leaderboard">
                    <thead>
                        <tr>
                            <th>Pos</th>
                            <th>Player</th>
                            <th>Played</th>
                            <th>Won</th>
                            <th>Lost</th>
                            <th>Points</th>
                            <th>NRR</th>
                        </tr>
                    </thead>
                    <tbody id="leaderboard-body">
                        <!-- Leaderboard data will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="tournament-section">
            <div class="section-header">
                <h2 class="section-title">Round Robin Matches</h2>
                <button id="add-match-btn" class="btn">
                    <i class="fas fa-plus"></i> Add Match
                </button>
            </div>
            
            <div class="matches-grid" id="round-robin-matches">
                <!-- Match cards will be populated by JavaScript -->
            </div>
        </div>
        
        <div class="tournament-section">
            <div class="section-header">
                <h2 class="section-title">Knockout Stage</h2>
            </div>
            
            <div class="knockout-bracket" id="knockout-bracket">
                <!-- Bracket will be populated by JavaScript -->
            </div>
        </div>
    </div>
    
    <!-- Edit Match Modal -->
    <div class="modal" id="edit-match-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Edit Match</h3>
                <button class="close-modal">&times;</button>
            </div>
            <form id="edit-match-form">
                <input type="hidden" id="match-id">
                <div class="form-group">
                    <label for="player1">Player 1</label>
                    <select id="player1" required>
                        <!-- Options will be populated by JavaScript -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="player1-score">Player 1 Score</label>
                    <input type="number" id="player1-score" min="0" step="0.5" required>
                </div>
                <div class="form-group">
                    <label for="player2">Player 2</label>
                    <select id="player2" required>
                        <!-- Options will be populated by JavaScript -->
                    </select>
                </div>
                <div class="form-group">
                    <label for="player2-score">Player 2 Score</label>
                    <input type="number" id="player2-score" min="0" step="0.5" required>
                </div>
                <div class="form-group">
                    <label for="match-status">Status</label>
                    <select id="match-status" required>
                        <option value="upcoming">Upcoming</option>
                        <option value="completed">Completed</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary close-modal">Cancel</button>
                    <button type="submit" class="btn">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Edit Tournament Modal -->
    <div class="modal" id="edit-tournament-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Tournament Settings</h3>
                <button class="close-modal">&times;</button>
            </div>
            <form id="edit-tournament-form">
                <div class="form-group">
                    <label for="tournament-name">Tournament Name</label>
                    <input type="text" id="tournament-name" required>
                </div>
                <div class="form-group">
                    <label for="tournament-date">Date</label>
                    <input type="text" id="tournament-date" required>
                </div>
                <div class="form-group">
                    <label for="tournament-location">Location</label>
                    <input type="text" id="tournament-location" required>
                </div>
                <div class="form-group">
                    <label for="tournament-players">Players (comma separated)</label>
                    <input type="text" id="tournament-players" required>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary close-modal">Cancel</button>
                    <button type="submit" class="btn">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        // Tournament Data
        let tournament = {
            name: "Summer Chess Championship",
            date: "June 15-30, 2023",
            location: "Community Center",
            players: ["Alice", "Bob", "Charlie", "David"],
            matches: [
                { id: 1, player1: "Alice", player2: "Bob", score1: 1, score2: 0, status: "completed" },
                { id: 2, player1: "Charlie", player2: "David", score1: 0.5, score2: 0.5, status: "completed" },
                { id: 3, player1: "Alice", player2: "Charlie", score1: 0, score2: 1, status: "completed" },
                { id: 4, player1: "Bob", player2: "David", score1: 1, score2: 0, status: "completed" },
                { id: 5, player1: "Alice", player2: "David", score1: 0, score2: 0, status: "upcoming" },
                { id: 6, player1: "Bob", player2: "Charlie", score1: 0, score2: 0, status: "upcoming" }
            ],
            knockoutMatches: [
                { id: "sf1", type: "semifinal", player1: null, player2: null, score1: 0, score2: 0, status: "upcoming" },
                { id: "el1", type: "eliminator", player1: null, player2: null, score1: 0, score2: 0, status: "upcoming" },
                { id: "el2", type: "eliminator", player1: null, player2: null, score1: 0, score2: 0, status: "upcoming" },
                { id: "final", type: "final", player1: null, player2: null, score1: 0, score2: 0, status: "upcoming" }
            ]
        };
        
        // DOM Elements
        const leaderboardBody = document.getElementById('leaderboard-body');
        const roundRobinMatches = document.getElementById('round-robin-matches');
        const knockoutBracket = document.getElementById('knockout-bracket');
        const editMatchModal = document.getElementById('edit-match-modal');
        const editTournamentModal = document.getElementById('edit-tournament-modal');
        const editMatchForm = document.getElementById('edit-match-form');
        const editTournamentForm = document.getElementById('edit-tournament-form');
        const addMatchBtn = document.getElementById('add-match-btn');
        const editTournamentBtn = document.getElementById('edit-tournament-btn');
        const closeModalBtns = document.querySelectorAll('.close-modal');
        
        // Initialize the tournament
        document.addEventListener('DOMContentLoaded', () => {
            updateLeaderboard();
            renderRoundRobinMatches();
            renderKnockoutBracket();
            setupModalListeners();
            setupFormListeners();
        });
        
        // Calculate player statistics
        function calculatePlayerStats() {
            const stats = {};
            
            // Initialize stats for each player
            tournament.players.forEach(player => {
                stats[player] = {
                    played: 0,
                    won: 0,
                    lost: 0,
                    points: 0,
                    scoreFor: 0,
                    scoreAgainst: 0
                };
            });
            
            // Process completed matches
            tournament.matches.forEach(match => {
                if (match.status === 'completed') {
                    const player1 = match.player1;
                    const player2 = match.player2;
                    const score1 = match.score1;
                    const score2 = match.score2;
                    
                    stats[player1].played++;
                    stats[player2].played++;
                    
                    stats[player1].points += score1;
                    stats[player2].points += score2;
                    
                    stats[player1].scoreFor += score1;
                    stats[player1].scoreAgainst += score2;
                    
                    stats[player2].scoreFor += score2;
                    stats[player2].scoreAgainst += score1;
                    
                    if (score1 > score2) {
                        stats[player1].won++;
                        stats[player2].lost++;
                    } else if (score1 < score2) {
                        stats[player1].lost++;
                        stats[player2].won++;
                    }
                }
            });
            
            // Calculate NRR (Net Rating Ratio)
            Object.keys(stats).forEach(player => {
                const playerStats = stats[player];
                if (playerStats.played > 0) {
                    playerStats.nrr = ((playerStats.scoreFor - playerStats.scoreAgainst) / playerStats.played).toFixed(2);
                } else {
                    playerStats.nrr = "0.00";
                }
            });
            
            return stats;
        }
        
        // Update the leaderboard
        function updateLeaderboard() {
            const stats = calculatePlayerStats();
            const sortedPlayers = tournament.players.slice().sort((a, b) => {
                if (stats[b].points !== stats[a].points) {
                    return stats[b].points - stats[a].points;
                }
                return parseFloat(stats[b].nrr) - parseFloat(stats[a].nrr);
            });
            
            leaderboardBody.innerHTML = '';
            
            sortedPlayers.forEach((player, index) => {
                const playerStats = stats[player];
                const row = document.createElement('tr');
                if (index === 0) row.classList.add('position-1');
                if (index === 1) row.classList.add('position-2');
                
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td><strong>${player}</strong></td>
                    <td>${playerStats.played}</td>
                    <td>${playerStats.won}</td>
                    <td>${playerStats.lost}</td>
                    <td><strong>${playerStats.points}</strong></td>
                    <td>${playerStats.nrr}</td>
                `;
                
                leaderboardBody.appendChild(row);
            });
            
            // Update knockout matches with top players
            updateKnockoutParticipants();
        }
        
        // Update knockout stage participants based on leaderboard
        function updateKnockoutParticipants() {
            const stats = calculatePlayerStats();
            const sortedPlayers = tournament.players.slice().sort((a, b) => {
                if (stats[b].points !== stats[a].points) {
                    return stats[b].points - stats[a].points;
                }
                return parseFloat(stats[b].nrr) - parseFloat(stats[a].nrr);
            });
            
            // Semifinal 1: 1st vs 2nd
            tournament.knockoutMatches.find(m => m.id === 'sf1').player1 = sortedPlayers[0];
            tournament.knockoutMatches.find(m => m.id === 'sf1').player2 = sortedPlayers[1];
            
            // Eliminator 1: 3rd vs 4th
            tournament.knockoutMatches.find(m => m.id === 'el1').player1 = sortedPlayers[2];
            tournament.knockoutMatches.find(m => m.id === 'el1').player2 = sortedPlayers[3];
            
            // Update Eliminator 2 and Final based on completed matches
            updateKnockoutProgression();
        }
        
        // Update knockout progression based on completed matches
        function updateKnockoutProgression() {
            const sf1 = tournament.knockoutMatches.find(m => m.id === 'sf1');
            const el1 = tournament.knockoutMatches.find(m => m.id === 'el1');
            const el2 = tournament.knockoutMatches.find(m => m.id === 'el2');
            const final = tournament.knockoutMatches.find(m => m.id === 'final');
            
            // If Semifinal 1 is completed, set the winner to Final player1
            if (sf1.status === 'completed') {
                final.player1 = sf1.score1 > sf1.score2 ? sf1.player1 : sf1.player2;
            }
            
            // If Eliminator 1 is completed, set the winner to Eliminator 2 player2
            if (el1.status === 'completed') {
                el2.player2 = el1.score1 > el1.score2 ? el1.player1 : el1.player2;
            }
            
            // If Semifinal 1 is completed, set the loser to Eliminator 2 player1
            if (sf1.status === 'completed') {
                el2.player1 = sf1.score1 > sf1.score2 ? sf1.player2 : sf1.player1;
            }
            
            // If Eliminator 2 is completed, set the winner to Final player2
            if (el2.status === 'completed') {
                final.player2 = el2.score1 > el2.score2 ? el2.player1 : el2.player2;
            }
            
            renderKnockoutBracket();
        }
        
        // Render round robin matches
        function renderRoundRobinMatches() {
            roundRobinMatches.innerHTML = '';
            
            tournament.matches.forEach(match => {
                const matchCard = document.createElement('div');
                matchCard.className = 'match-card';
                matchCard.dataset.id = match.id;
                
                matchCard.innerHTML = `
                    <div class="match-header">
                        <h3 class="match-title">Match ${match.id}</h3>
                        <span class="match-status ${match.status}">${match.status === 'completed' ? 'Completed' : 'Upcoming'}</span>
                    </div>
                    <div class="match-players">
                        <div class="player-row">
                            <span class="player-name">${match.player1}</span>
                            <div class="player-score">
                                <span>${match.status === 'completed' ? match.score1 : '-'}</span>
                            </div>
                        </div>
                        <div class="player-row">
                            <span class="player-name">${match.player2}</span>
                            <div class="player-score">
                                <span>${match.status === 'completed' ? match.score2 : '-'}</span>
                            </div>
                        </div>
                    </div>
                    <div class="match-actions">
                        <button class="btn edit-match-btn" data-id="${match.id}">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                    </div>
                `;
                
                roundRobinMatches.appendChild(matchCard);
            });
            
            // Add event listeners to edit buttons
            document.querySelectorAll('.edit-match-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const matchId = parseInt(e.currentTarget.dataset.id);
                    openEditMatchModal(matchId);
                });
            });
        }
        
        // Render knockout bracket
        function renderKnockoutBracket() {
            knockoutBracket.innerHTML = '';
            
            // Create columns for each stage
            const stages = [
                { title: "Semifinals", matches: [tournament.knockoutMatches.find(m => m.id === 'sf1')] },
                { title: "Eliminators", matches: [
                    tournament.knockoutMatches.find(m => m.id === 'el1'),
                    tournament.knockoutMatches.find(m => m.id === 'el2')
                ]},
                { title: "Final", matches: [tournament.knockoutMatches.find(m => m.id === 'final')] }
            ];
            
            stages.forEach(stage => {
                const column = document.createElement('div');
                column.className = 'bracket-column';
                
                const title = document.createElement('h3');
                title.textContent = stage.title;
                title.style.textAlign = 'center';
                title.style.marginBottom = '1rem';
                column.appendChild(title);
                
                stage.matches.forEach(match => {
                    const matchCard = document.createElement('div');
                    matchCard.className = `bracket-match ${match.id === 'final' ? 'final' : ''}`;
                    matchCard.dataset.id = match.id;
                    
                    const player1 = match.player1 || "TBD";
                    const player2 = match.player2 || "TBD";
                    const score1 = match.status === 'completed' ? match.score1 : '-';
                    const score2 = match.status === 'completed' ? match.score2 : '-';
                    
                    matchCard.innerHTML = `
                        <div class="match-header">
                            <h4 class="match-title">${match.type === 'semifinal' ? 'Semifinal 1' : 
                              match.type === 'eliminator' ? (match.id === 'el1' ? 'Eliminator 1' : 'Eliminator 2') : 'Final'}</h4>
                            <span class="match-status ${match.status}">${match.status === 'completed' ? 'Completed' : 'Upcoming'}</span>
                        </div>
                        <div class="match-players">
                            <div class="player-row">
                                <span class="player-name">${player1}</span>
                                <div class="player-score">
                                    <span>${score1}</span>
                                </div>
                            </div>
                            <div class="player-row">
                                <span class="player-name">${player2}</span>
                                <div class="player-score">
                                    <span>${score2}</span>
                                </div>
                            </div>
                        </div>
                        <div class="match-actions">
                            <button class="btn edit-match-btn" data-id="${match.id}" data-knockout="true">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                        </div>
                    `;
                    
                    column.appendChild(matchCard);
                });
                
                knockoutBracket.appendChild(column);
            });
            
            // Add event listeners to knockout edit buttons
            document.querySelectorAll('.bracket-match .edit-match-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const matchId = e.currentTarget.dataset.id;
                    const isKnockout = e.currentTarget.dataset.knockout === 'true';
                    openEditMatchModal(matchId, isKnockout);
                });
            });
        }
        
        // Open edit match modal
        function openEditMatchModal(matchId, isKnockout = false) {
            const match = isKnockout ? 
                tournament.knockoutMatches.find(m => m.id === matchId) :
                tournament.matches.find(m => m.id === matchId);
            
            if (!match) return;
            
            document.getElementById('match-id').value = matchId;
            document.getElementById('player1-score').value = match.score1;
            document.getElementById('player2-score').value = match.score2;
            document.getElementById('match-status').value = match.status;
            
            const player1Select = document.getElementById('player1');
            const player2Select = document.getElementById('player2');
            
            player1Select.innerHTML = '';
            player2Select.innerHTML = '';
            
            const players = isKnockout ? 
                tournament.players.concat(["TBD"]) : 
                tournament.players;
            
            players.forEach(player => {
                const option1 = document.createElement('option');
                option1.value = player;
                option1.textContent = player;
                option1.selected = player === match.player1;
                player1Select.appendChild(option1);
                
                const option2 = document.createElement('option');
                option2.value = player;
                option2.textContent = player;
                option2.selected = player === match.player2;
                player2Select.appendChild(option2);
            });
            
            editMatchModal.dataset.knockout = isKnockout;
            editMatchModal.style.display = 'flex';
        }
        
        // Setup modal event listeners
        function setupModalListeners() {
            // Close modals when clicking X or outside
            closeModalBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    editMatchModal.style.display = 'none';
                    editTournamentModal.style.display = 'none';
                });
            });
            
            window.addEventListener('click', (e) => {
                if (e.target === editMatchModal) {
                    editMatchModal.style.display = 'none';
                }
                if (e.target === editTournamentModal) {
                    editTournamentModal.style.display = 'none';
                }
            });
            
            // Add match button
            addMatchBtn.addEventListener('click', () => {
                // Generate new match ID
                const newId = tournament.matches.length > 0 ? 
                    Math.max(...tournament.matches.map(m => m.id)) + 1 : 1;
                
                // Create new match
                const newMatch = {
                    id: newId,
                    player1: tournament.players[0],
                    player2: tournament.players[1],
                    score1: 0,
                    score2: 0,
                    status: "upcoming"
                };
                
                tournament.matches.push(newMatch);
                renderRoundRobinMatches();
                openEditMatchModal(newId);
            });
            
            // Edit tournament button
            editTournamentBtn.addEventListener('click', () => {
                document.getElementById('tournament-name').value = tournament.name;
                document.getElementById('tournament-date').value = tournament.date;
                document.getElementById('tournament-location').value = tournament.location;
                document.getElementById('tournament-players').value = tournament.players.join(', ');
                editTournamentModal.style.display = 'flex';
            });
        }
        
        // Setup form event listeners
        function setupFormListeners() {
            // Edit match form
            editMatchForm.addEventListener('submit', (e) => {
                e.preventDefault();
                
                const matchId = document.getElementById('match-id').value;
                const isKnockout = editMatchModal.dataset.knockout === 'true';
                const match = isKnockout ? 
                    tournament.knockoutMatches.find(m => m.id === matchId) :
                    tournament.matches.find(m => m.id === parseInt(matchId));
                
                if (match) {
                    match.player1 = document.getElementById('player1').value;
                    match.player2 = document.getElementById('player2').value;
                    match.score1 = parseFloat(document.getElementById('player1-score').value);
                    match.score2 = parseFloat(document.getElementById('player2-score').value);
                    match.status = document.getElementById('match-status').value;
                    
                    if (isKnockout) {
                        renderKnockoutBracket();
                        updateKnockoutProgression();
                    } else {
                        renderRoundRobinMatches();
                    }
                    
                    updateLeaderboard();
                    editMatchModal.style.display = 'none';
                }
            });
            
            // Edit tournament form
            editTournamentForm.addEventListener('submit', (e) => {
                e.preventDefault();
                
                tournament.name = document.getElementById('tournament-name').value;
                tournament.date = document.getElementById('tournament-date').value;
                tournament.location = document.getElementById('tournament-location').value;
                tournament.players = document.getElementById('tournament-players').value
                    .split(',')
                    .map(p => p.trim())
                    .filter(p => p.length > 0);
                
                // Update tournament info display
                document.querySelector('.tournament-info h3').textContent = tournament.name;
                document.querySelector('.tournament-info p').innerHTML = `
                    <strong>Date:</strong> ${tournament.date} | <strong>Location:</strong> ${tournament.location}
                `;
                
                // Reinitialize matches and leaderboard
                updateLeaderboard();
                renderRoundRobinMatches();
                renderKnockoutBracket();
                
                editTournamentModal.style.display = 'none';
            });
        }
    </script>
</body>
</html>
